
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.TroutStockingScalarFieldEnum = {
  id: 'id',
  location: 'location',
  waterBody: 'waterBody',
  county: 'county',
  species: 'species',
  size: 'size',
  quantity: 'quantity',
  stockingDate: 'stockingDate',
  nextStockingDate: 'nextStockingDate',
  latitude: 'latitude',
  longitude: 'longitude',
  waterBodyType: 'waterBodyType',
  accessInfo: 'accessInfo',
  regulations: 'regulations',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WaterConditionScalarFieldEnum = {
  id: 'id',
  waterBody: 'waterBody',
  location: 'location',
  lastUpdated: 'lastUpdated',
  waterLevel: 'waterLevel',
  waterTemperature: 'waterTemperature',
  clarity: 'clarity',
  flow: 'flow',
  fishingConditions: 'fishingConditions',
  notes: 'notes',
  weatherImpact: 'weatherImpact',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.OutdoorEventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  eventType: 'eventType',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  startDate: 'startDate',
  endDate: 'endDate',
  cost: 'cost',
  registrationRequired: 'registrationRequired',
  registrationUrl: 'registrationUrl',
  contactInfo: 'contactInfo',
  ageRestrictions: 'ageRestrictions',
  capacity: 'capacity',
  difficulty: 'difficulty',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HuntingInfoScalarFieldEnum = {
  id: 'id',
  species: 'species',
  seasonStartDate: 'seasonStartDate',
  seasonEndDate: 'seasonEndDate',
  seasonDescription: 'seasonDescription',
  units: 'units',
  licenseRequired: 'licenseRequired',
  dailyBagLimit: 'dailyBagLimit',
  possessionLimit: 'possessionLimit',
  seasonLimit: 'seasonLimit',
  weaponRestrictions: 'weaponRestrictions',
  specialRules: 'specialRules',
  applicationDeadline: 'applicationDeadline',
  drawResults: 'drawResults',
  tags: 'tags',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParkInfoScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  location: 'location',
  latitude: 'latitude',
  longitude: 'longitude',
  amenities: 'amenities',
  activities: 'activities',
  dailyPassFee: 'dailyPassFee',
  annualPassFee: 'annualPassFee',
  campingFee: 'campingFee',
  summerHours: 'summerHours',
  winterHours: 'winterHours',
  currentHours: 'currentHours',
  campingAvailable: 'campingAvailable',
  reservationRequired: 'reservationRequired',
  petPolicy: 'petPolicy',
  accessibility: 'accessibility',
  currentConditions: 'currentConditions',
  alerts: 'alerts',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  avatar: 'avatar',
  emailVerified: 'emailVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  troutStockingId: 'troutStockingId',
  parkInfoId: 'parkInfoId',
  eventId: 'eventId',
  customLocation: 'customLocation',
  latitude: 'latitude',
  longitude: 'longitude',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.TripPlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  participants: 'participants',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TripPlanItemScalarFieldEnum = {
  id: 'id',
  tripPlanId: 'tripPlanId',
  type: 'type',
  troutStockingId: 'troutStockingId',
  parkInfoId: 'parkInfoId',
  eventId: 'eventId',
  customTitle: 'customTitle',
  customLocation: 'customLocation',
  latitude: 'latitude',
  longitude: 'longitude',
  scheduledTime: 'scheduledTime',
  estimatedDuration: 'estimatedDuration',
  notes: 'notes',
  completed: 'completed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  value: 'value',
  notifyEmail: 'notifyEmail',
  notifyPush: 'notifyPush',
  createdAt: 'createdAt'
};

exports.Prisma.DataSyncLogScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  recordsProcessed: 'recordsProcessed',
  recordsAdded: 'recordsAdded',
  recordsUpdated: 'recordsUpdated',
  errorMessage: 'errorMessage',
  executionTime: 'executionTime',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  TroutStocking: 'TroutStocking',
  WaterCondition: 'WaterCondition',
  OutdoorEvent: 'OutdoorEvent',
  HuntingInfo: 'HuntingInfo',
  ParkInfo: 'ParkInfo',
  User: 'User',
  UserFavorite: 'UserFavorite',
  TripPlan: 'TripPlan',
  TripPlanItem: 'TripPlanItem',
  UserSubscription: 'UserSubscription',
  DataSyncLog: 'DataSyncLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
